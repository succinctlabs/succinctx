#!/usr/bin/env bash
set -e

######################################
###### succinctup update script ######
######################################

BASE_DIR=${XDG_CONFIG_HOME:-$HOME}
SUCCINCT_DIR=${SUCCINCT_DIR:-"$BASE_DIR/.succinct"}
SUCCINCT_BIN_DIR="$SUCCINCT_DIR/bin"
SUCCINCT_MAN_DIR="$SUCCINCT_DIR/share/man/man1"
# Since private reposity, much use GitHub token.
GITHUB_TOKEN=${GITHUB_TOKEN}

main() {
  if [ -z "$GITHUB_TOKEN" ]; then
    err "GITHUB_TOKEN is not set, please set it to a value of a PAT with repo read access: https://docs.github.com/en/enterprise-server@3.6/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token"
  fi

  need_cmd git
  need_cmd curl

  while [[ $1 ]]; do
    case $1 in
      --)               shift; break;;
      -r|--repo)        shift; SUCCINCTUP_REPO=$1;;
      -b|--branch)      shift; SUCCINCTUP_BRANCH=$1;;
      -v|--version)     shift; SUCCINCTUP_VERSION=$1;;
      -p|--path)        shift; SUCCINCTUP_LOCAL_REPO=$1;;
      -P|--pr)          shift; SUCCINCTUP_PR=$1;;
      -C|--commit)      shift; SUCCINCTUP_COMMIT=$1;;
      -h|--help)
        usage
        exit 0
        ;;
      *)
        warn "unknown option: $1"
        usage
        exit 1
    esac; shift
  done

  # Print the banner after successfully parsing args
  # banner

  if [ -n "$SUCCINCTUP_PR" ]; then
    if [ -z "$SUCCINCTUP_BRANCH" ]; then
      SUCCINCTUP_BRANCH="refs/pull/$SUCCINCTUP_PR/head"
    else
      err "can't use --pr and --branch at the same time"
    fi
  fi

  # Installs succinct from a local repository if --path parameter is provided
  if [[ -n "$SUCCINCTUP_LOCAL_REPO" ]]; then
    need_cmd go

    # Ignore branches/versions as we do not want to modify local git state
    if [ -n "$SUCCINCTUP_REPO" ] || [ -n "$SUCCINCTUP_BRANCH" ] || [ -n "$SUCCINCTUP_VERSION" ]; then
      warn "--branch, --version, and --repo arguments are ignored during local install"
    fi

    # Enter local repo and build
    say "installing from $SUCCINCTUP_LOCAL_REPO"
    cd "$SUCCINCTUP_LOCAL_REPO/cli"
    ensure go build -o "$SUCCINCT_BIN_DIR/succ" main.go

    say "done"
    exit 0
  fi

  SUCCINCTUP_REPO=${SUCCINCTUP_REPO:-succinctlabs/sdk}

  # Install by downloading binaries
  if [[ "$SUCCINCTUP_REPO" == "succinctlabs/sdk" && -z "$SUCCINCTUP_BRANCH" && -z "$SUCCINCTUP_COMMIT" ]]; then
    SUCCINCTUP_VERSION=${SUCCINCTUP_VERSION:-nightly}
    SUCCINCTUP_TAG=$SUCCINCTUP_VERSION

    # Normalize versions (handle channels, versions without v prefix
    if [[ "$SUCCINCTUP_VERSION" == "nightly" ]]; then
      # Locate real nightly tag
      SHA=$(ensure curl -sSf "https://api.github.com/repos/$SUCCINCTUP_REPO/git/refs/tags/nightly" -H "Authorization: token ${GITHUB_TOKEN}" \
        | grep -Eo '"sha"[^,]*' \
        | grep -Eo '[^:]*$' \
        | tr -d '"' \
        | tr -d ' ' \
        | cut -d ':' -f2 )
      # SUCCINCTUP_TAG="nightly-${SHA}"
      SUCCINCTUP_TAG="nightly"
    elif [[ "$SUCCINCTUP_VERSION" == nightly* ]]; then
      SUCCINCTUP_VERSION="nightly"
    elif [[ "$SUCCINCTUP_VERSION" == [[:digit:]]* ]]; then
      # Add v prefix
      SUCCINCTUP_VERSION="v${SUCCINCTUP_VERSION}"
      SUCCINCTUP_TAG="${SUCCINCTUP_VERSION}"
    fi

    say "installing succinct (version ${SUCCINCTUP_VERSION}, tag ${SUCCINCTUP_TAG})"

    PLATFORM="$(uname -s)"
    EXT="tar.gz"
    case $PLATFORM in
      Linux)
        PLATFORM="linux"
        ;;
      Darwin)
        PLATFORM="darwin"
        ;;
      MINGW*)
        EXT="zip"
        PLATFORM="win32"
        ;;
      *)
        err "unsupported platform: $PLATFORM"
        ;;
    esac

    ARCHITECTURE="$(uname -m)"
    if [ "${ARCHITECTURE}" = "x86_64" ]; then
      # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
      if [ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" = "1" ]; then
        ARCHITECTURE="arm64" # Rosetta.
      else
        ARCHITECTURE="amd64" # Intel.
      fi
    elif [ "${ARCHITECTURE}" = "arm64" ] ||[ "${ARCHITECTURE}" = "aarch64" ] ; then
      ARCHITECTURE="arm64" # Arm.
    else
      ARCHITECTURE="amd64" # Amd.
    fi

    # Compute the URL of the release tarball in the Succinct repository.
    RELEASE_URL="https://api.github.com/repos/${SUCCINCTUP_REPO}/tarball/${SUCCINCTUP_TAG}"

    # Check if the SUCCINCT_BIN_DIR exists and remove it if it does
    if [ -d "$SUCCINCT_BIN_DIR" ]; then
      say "Removing existing directory $SUCCINCT_BIN_DIR"
      rm -rf "$SUCCINCT_BIN_DIR"
    fi

    # Ensure the directory exists
    ensure mkdir -p "$SUCCINCT_BIN_DIR"

    # Download and extract the binaries archive
    say "downloading latest succinct binaries from $RELEASE_URL..."
    tmp_file="$(mktemp -t succinct.tar.gz)"
    # Use wget with the GitHub API to download the tarball, suppress output with -q
    ensure wget -q --header="Authorization: token ${GITHUB_TOKEN}" --header="Accept:application/vnd.github.v3.raw" -O "$tmp_file" "$RELEASE_URL" >/dev/null 2>&1
    file "$tmp_file" # Print the file type
    tmp_dir="$(mktemp -d -t succinct)"
    ensure tar -xzC "$tmp_dir" -f "$tmp_file"
    # Move the content from the top-level directory to the desired location
    ensure mv "$tmp_dir"/*/* "$SUCCINCT_BIN_DIR"
    rm -f "$tmp_file"
    rm -rf "$tmp_dir"

    say "download successful, building the CLI..."

    # Build the CLI
    cli_dir="$SUCCINCT_BIN_DIR/cli"
    ensure cd "$cli_dir"
    ensure go build
    ensure mv "$cli_dir/cli" "$SUCCINCT_BIN_DIR/succinct" # Assuming the built binary is named 'succinct'

    # Optionally download the manuals
    # if check_cmd tar; then
    #   say "downloading manpages"
    #   mkdir -p "$SUCCINCT_MAN_DIR"
    #   download "$MAN_TARBALL_URL" | tar -xzC "$SUCCINCT_MAN_DIR"
    # else
    #   say 'skipping manpage download: missing "tar"'
    # fi

    bin_path="$SUCCINCT_BIN_DIR/succinct"

    # Print installed msg TODO when --version flag works
    # say "installed - $(ensure "$bin_path" --version)"

    # Check if the default path of the binary is not in SUCCINCT_BIN_DIR
    which_path="$(which succinct)"
    if [ "$which_path" != "$bin_path" ]; then
      warn ""
      cat 1>&2 <<EOF
There are multiple binaries with the name '$bin' present in your 'PATH'.
This may be the result of installing '$bin' using another method,
like Go or other package managers.
You may need to run 'rm $which_path' or move '$SUCCINCT_BIN_DIR'
in your 'PATH' to allow the newly installed version to take precedence!

EOF
    fi

    say "done!"

  # Install by cloning the repo with the provided branch/tag
  else
    need_cmd go
    SUCCINCTUP_BRANCH=${SUCCINCTUP_BRANCH:-master}
    REPO_PATH="$SUCCINCT_DIR/$SUCCINCTUP_REPO"

    # If repo path does not exist, grab the author from the repo, make a directory in .succinct, cd to it and clone.
    if [ ! -d "$REPO_PATH" ]; then
      AUTHOR="$(echo "$SUCCINCTUP_REPO" | cut -d'/' -f1 -)"
      ensure mkdir -p "$SUCCINCT_DIR/$AUTHOR"
      cd "$SUCCINCT_DIR/$AUTHOR"
      ensure git clone "https://github.com/$SUCCINCTUP_REPO"
    fi

    # Force checkout, discarding any local changes
    cd "$REPO_PATH"
    ensure git fetch origin "${SUCCINCTUP_BRANCH}:remotes/origin/${SUCCINCTUP_BRANCH}"
    ensure git checkout "origin/${SUCCINCTUP_BRANCH}"

    # If set, checkout specific commit from branch
    if [ -n "$SUCCINCTUP_COMMIT" ]; then
      say "installing at commit $SUCCINCTUP_COMMIT"
      ensure git checkout "$SUCCINCTUP_COMMIT"
    fi

    # Build the repo and install the binaries locally to the .succinct bin directory.
    cd "$REPO_PATH/cli"
    ensure go build -o "$SUCCINCT_BIN_DIR/succ" main.go

    # If help2man is installed, use it to add Succinct man pages.
    # if check_cmd help2man; then
    #   for bin in "${BINS[@]}"; do
    #     help2man -N "$SUCCINCT_BIN_DIR/$bin" > "$SUCCINCT_MAN_DIR/$bin.1"
    #   done
    # fi

    say "done"
  fi
}

usage() {
  cat 1>&2 <<EOF
The installer for Succinct.

Update or revert to a specific Succinct version with ease.

USAGE:
    succinctup <OPTIONS>

OPTIONS:
    -h, --help      Print help information
    -v, --version   Install a specific version
    -b, --branch    Install a specific branch
    -P, --pr        Install a specific Pull Request
    -C, --commit    Install a specific commit
    -r, --repo      Install from a remote GitHub repo (uses default branch if no other options are set)
    -p, --path      Install a local repository
EOF
}

say() {
  printf "succinctup: %s\n" "$1"
}

warn() {
  say "warning: ${1}" >&2
}

err() {
  say "$1" >&2
  exit 1
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" &>/dev/null
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

# Downloads $1 into $2 or stdout
download() {
  if [ "$2" ]; then
    # output into $2
    if check_cmd curl; then
      curl -#o "$2" -L -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept:application/vnd.github.v3.raw" "$1"
    else
      wget --show-progress -qO "$2" --header="Authorization: token ${GITHUB_TOKEN}" --header="Accept:application/vnd.github.v3.raw" "$1"
    fi
  else
    # output to stdout
    if check_cmd curl; then
      curl -#L -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept:application/vnd.github.v3.raw" "$1"
    else
      wget --show-progress -qO- --header="Authorization: token ${GITHUB_TOKEN}" --header="Accept:application/vnd.github.v3.raw" "$1"
    fi
  fi
}

# Banner Function for Succinct 
# banner() {
# }

main "$@" || exit 1
